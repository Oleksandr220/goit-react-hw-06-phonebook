{"version":3,"sources":["components/Form/Form.js","components/Filter/Filter.js","components/ContactsList/ContactsList.js","components/Conteiner/Conteiner.js","App.js","index.js"],"names":["Form","addContacts","useState","name","setName","number","setNumber","nameInputId","shortid","generate","numberInputId","handleChange","e","currentTarget","value","reset","onSubmit","preventDefault","className","htmlFor","type","onChange","id","pattern","title","Filter","ContactsList","users","ondeleteContact","map","onClick","Conteiner","children","App","contacts","setContacts","filter","setFilter","useEffect","localStorage","getItem","parsedContacts","JSON","parse","prevState","setItem","stringify","normalizedFilter","toLocaleLowerCase","visibleContacts","contact","includes","data","some","alert","length","eventId","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.004b1735.chunk.js","sourcesContent":["import { useState } from \"react\";\nimport \"./Form.css\";\nimport shortid from \"shortid\";\n\nfunction Form({ addContacts }) {\n  const [name, setName] = useState(\"\");\n  const [number, setNumber] = useState(\"\");\n\n  const nameInputId = shortid.generate();\n  const numberInputId = shortid.generate();\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    addContacts({ name, number });\n    reset();\n  };\n\n  const handleChange = (e) => {\n    const { name, value } = e.currentTarget;\n    if (name === \"name\") {\n      setName(value);\n    }\n    if (name === \"number\") {\n      setNumber(value);\n    }\n  };\n\n  const reset = (e) => {\n    setName(\"\");\n    setNumber(\"\");\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"form\">\n      <label htmlFor={nameInputId} className=\"form__label\">\n        Name\n      </label>\n      <input\n        type=\"text\"\n        name=\"name\"\n        value={name}\n        onChange={handleChange}\n        className=\"form__input\"\n        id={nameInputId}\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer и т. п.\"\n      ></input>\n      <label htmlFor={numberInputId} className=\"form__label\">\n        Number\n      </label>\n      <input\n        type=\"phone\"\n        name=\"number\"\n        value={number}\n        onChange={handleChange}\n        className=\"form__input\"\n        id={numberInputId}\n        pattern=\"(\\+?( |-|\\.)?\\d{1,2}( |-|\\.)?)?(\\(?\\d{3}\\)?|\\d{3})( |-|\\.)?(\\d{3}( |-|\\.)?\\d{4})\"\n        title=\"Номер телефона должен состоять из 11-12 цифр и может содержать цифры, пробелы, тире, пузатые скобки и может начинаться с +\"\n      ></input>\n      <button type=\"submit\" className=\"form__button\">\n        Add contact\n      </button>\n    </form>\n  );\n}\n\nexport default Form;\n","import React from \"react\";\nimport \"./Filter.css\";\nimport PropTypes from \"prop-types\";\n\nconst Filter = ({ value, onChange }) => {\n  return (\n    <>\n      <p>Find contacts by name</p>\n      <label>\n        <input\n          type=\"text\"\n          value={value}\n          onChange={onChange}\n          className=\"filter__input\"\n        ></input>\n      </label>\n    </>\n  );\n};\n\nFilter.propTypes = {\n  value: PropTypes.string,\n  onChange: PropTypes.func,\n};\n\nexport default Filter;\n","import React from \"react\";\nimport \"./ContactList.css\";\n\nconst ContactsList = ({ users, ondeleteContact }) => (\n  <ul className=\"contactList__list\">\n    {users.map(({ id, name, number }) => (\n      <li key={id} className=\"contactList__item\">\n        <span className=\"contactList__text\">{name}:</span>\n        <span className=\"contactList__text\">{number}</span>\n        <button\n          className=\"contactList__button\"\n          onClick={() => ondeleteContact(id)}\n        >\n          Delete contact\n        </button>\n      </li>\n    ))}\n  </ul>\n);\n\nexport default ContactsList;\n","import React from \"react\";\nimport \"./Conteiner.css\";\nimport PropTypes from \"prop-types\";\n\nconst Conteiner = ({ title, children }) => {\n  return (\n    <div className=\"conteiner\">\n      <h2 className=\"conteiner__title\">{title}</h2>\n      <div>{children}</div>\n    </div>\n  );\n};\n\nConteiner.propTypes = {\n  children: PropTypes.node,\n  title: PropTypes.string,\n};\n\nexport default Conteiner;\n","import \"./App.css\";\nimport React, { useState, useEffect } from \"react\";\nimport Form from \"./components/Form/Form\";\nimport Filter from \"./components/Filter/Filter\";\nimport ContactsList from \"./components/ContactsList/ContactsList\";\nimport Conteiner from \"./components/Conteiner/Conteiner\";\nimport shortid from \"shortid\";\n\nfunction App() {\n  const [contacts, setContacts] = useState([]);\n  const [filter, setFilter] = useState(\"\");\n\n  useEffect(() => {\n    const contacts = localStorage.getItem(\"contacts\");\n    const parsedContacts = JSON.parse(contacts);\n    if (parsedContacts) {\n      setContacts(parsedContacts);\n    }\n  }, []);\n\n  useEffect(\n    (prevState) => {\n      if (contacts !== prevState) {\n        localStorage.setItem(\"contacts\", JSON.stringify(contacts));\n      }\n    },\n    [contacts]\n  );\n\n  const addContacts = (data) => {\n    const contact = {\n      id: shortid.generate(),\n      name: data.name,\n      number: data.number,\n    };\n\n    const inIsContact = (e) => {\n      return contact.name === e.name;\n    };\n    if (data.name === \"\" || data.number === \"\") {\n      alert(\"Please make a correct contact\");\n      return;\n    }\n    if (contacts.some(inIsContact)) {\n      alert(`${data.name} is already in contacts`);\n    } else setContacts([contact, ...contacts]);\n  };\n\n  const deleteContact = (eventId) => {\n    setContacts((prevState) =>\n      prevState.filter((contact) => contact.id !== eventId)\n    );\n  };\n\n  const changeFilter = (e) => {\n    setFilter(e.currentTarget.value);\n  };\n\n  const normalizedFilter = filter.toLocaleLowerCase();\n\n  const visibleContacts = contacts.filter(\n    (contact) =>\n      contact.name.includes(normalizedFilter) ||\n      contact.number.includes(normalizedFilter)\n  );\n\n  return (\n    <>\n      <Conteiner title=\"Phonebook\">\n        <Form addContacts={addContacts} />\n      </Conteiner>\n      <Conteiner title=\"Contacts\">\n        {contacts.length > 0 ? (\n          <>\n            <Filter value={filter} onChange={changeFilter} />\n            <ContactsList\n              users={visibleContacts}\n              ondeleteContact={deleteContact}\n            />\n          </>\n        ) : (\n          <span className=\"contact-message\">\n            You have not contacts yet, please add contact to phoneboock\n          </span>\n        )}\n      </Conteiner>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}